package com.example.healthcaremonitoringbackend.boundary;

import com.example.healthcaremonitoringbackend.control.LoginService;
import com.example.healthcaremonitoringbackend.entity.User;
import com.example.healthcaremonitoringbackend.repository.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
@Controller    // This means that this class is a Controller
@RequestMapping(path="/login")
public class LoginController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
//    @Autowired
//    private LoginControlleroginService loginService;
    private LoginService loginService = new LoginService();

//    @PostMapping("/login")
//    public User login(@RequestBody @Valid User user) {
//        //LOG.info("User {} signed in", user.getUsername());
//        return loginService.getUser(user);
//    }

    @PostMapping(path="/loginUser")
    public @ResponseBody User getUserr(/*@RequestBody @Valid User user*/@RequestParam(name = "user_name") String username, @RequestParam String password)
    {
       // User user= userRepository.findBy(username, password);

        return userRepository.findUserByUsernameAndPassword(username, password);
//        if(user.getUsername().equals("Ana"))
//        return "Da";
//        return "nu";
    }

//    @PostMapping(path="/loginUser")
//    public @ResponseBody String getUser(/*@RequestBody @Valid User user*/@RequestParam String username, @RequestParam String password)
//    {
//        User user= userRepository.findBy(username, password);
//
//        //return userRepository.findBy(username, password);
//        if(user.getUsername().equals("Ana"))
//        return "Da";
//        return "nu";
//
//    }

    @RequestMapping(value = "/user/{username}/{password}", method = RequestMethod.GET)
    public String getUser(@PathVariable("username") String username, @PathVariable("password") String password) {

        User user = userRepository.findBy(username, password);
        if (user == null) {
            return "Nu";
        }
        return "Da";
    }


//    Iterable<User> getAllUsers() {
//        // This returns a JSON or XML with the users
//        return userRepository.findAll();
//    }
}

//package com.example.healthcaremonitoringbackend.boundary;
//
//import com.example.healthcaremonitoringbackend.control.LoginService;
//import com.example.healthcaremonitoringbackend.entity.User;
//import com.example.healthcaremonitoringbackend.repository.UserRepository;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Controller;
//import org.springframework.web.bind.annotation.*;
//
//@Controller    // This means that this class is a Controller
//@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
//public class LoginController {
//
//    //private static final Logger LOG = LoggerFactory.getLogger(VacancyController.class);
//
//    @Autowired // This means to get the bean called userRepository
//    // Which is auto-generated by Spring, we will use it to handle the data
//    private UserRepository userRepository;
//
//    @GetMapping(path="/add") // Map ONLY GET Requests
//    public @ResponseBody String addNewUser (@RequestParam String username, @RequestParam String password, @RequestParam String firstName
//            ,@RequestParam String lastName) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setFirstName(firstName);
//        n.setLastName(lastName);
//        n.setPassword(password);
//        n.setUsername(username);
//        userRepository.save(n);
//        return "Saved";
//    }
//
////    @Autowired
////    private LoginService loginService;
////
////    @PostMapping("/login")
////    public LoginService.UserInfo login(@RequestBody @Valid User user) {
////        LOG.info("User {} signed in", user.getUsername());
////        return loginService.getUser(user);
////    }
//
//    @GetMapping(path="/all")
//    public @ResponseBody Iterable<User> getAllUsers() {
//        // This returns a JSON or XML with the users
//        return userRepository.findAll();
//    }
//}
